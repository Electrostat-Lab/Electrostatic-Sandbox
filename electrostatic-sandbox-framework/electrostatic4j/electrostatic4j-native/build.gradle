import com.serial4j.build.UnixScriptRunner;
import com.serial4j.build.util.JarMetadata

plugins {
    id 'java-library'
}

final String JAVA_HOME = System.getProperty("java.home")
final String buildDirectory="${project.rootDir}/${rootProject.name}-native/build/classes/java/main/lib"
final String nativeObjects="${project.rootDir}/${rootProject.name}-native/build/lib"
final String jarOutput="${project.rootDir}/${rootProject.name}-native/build/libs"
final String examples="${project.rootDir}/${rootProject.name}-examples/libs"
final String compileX86_script = "./helper-scripts/compile.sh"
final String compileAndroid_script = "./helper-scripts/compile-android.sh"

tasks.register("copyBinaries", Copy) {
    mustRunAfter(compileX86_64, compileX86)

    from "${nativeObjects}"
    into "${buildDirectory}"
}

tasks.register("copyToExamples", Copy) {
    dependsOn(jar)

    from "${jarOutput}"
    into "${examples}"
}

tasks.register("compileX86_64", UnixScriptRunner) {
   scriptArgs = new String[] { "${JAVA_HOME}", "x86-64", "${electrostaticHome}" }
   script = "${compileX86_script}"
}

tasks.register("compileX86", UnixScriptRunner) {
   scriptArgs = new String[] { "${JAVA_HOME}", "x86", "${electrostaticHome}" }
   script = "${compileX86_script}"
}

tasks.register("compileAndroid", UnixScriptRunner) {
   scriptArgs = new String[] { "${JAVA_HOME}" }
   script = "${compileAndroid_script}"
}

jar { // assemble jar options [java -jar]
    archiveFileName = "${project.name}-${system}.jar"
    manifest {
        attributes 'Project': "${project.name}-${system}",
                   'Implementation-Version': "${version}",
                   'Automatic-Module-Name': "${project.name.replace("-", ".")}",
                   'Created-by': JavaVersion.current()
    }
}